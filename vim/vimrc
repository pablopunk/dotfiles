"
" Some general settings
"

filetype plugin indent on
syntax on

set ttyfast               " Faster redrawing
set lazyredraw            " Only when necessary
set encoding=utf-8
set incsearch             " Incremental search
set hlsearch              " Highlight search term
set ignorecase            " Search is case insensitive
set smartcase             " Unless your search has capital letters
set mouse=a               " Allow mouse integration


" Better 'find' command (autocompletion and some ignored folders)
set path+=**                           " Search files subdirectories
set wildmenu                           " Allow autocomplete on 'find' command
set wildignore+=**/node_modules/**
set wildignore+=**/logs/**
set wildignore+=**/log/**
set wildignore+=**/cov/**
set wildignore+=**/coverage/**
set wildignore+=**/vendor/**
set wildignore+=**/bower_components/**
set wildignore+=**/po/**
set wildignore+=**/lang/**


" Delete key sometimes does not work, here's the fix
set backspace=indent,eol,start


" Keep undo history across sessions by storing it in a file
if has('persistent_undo')
  let undo_dir = expand('$HOME/.vim/undo_dir')
  if !isdirectory(undo_dir)
    call mkdir(undo_dir, "", 0700)
  endif
  set undodir=$HOME/.vim/undo_dir
  set undofile
endif


"
" Commands
"

" Lint js with eslint
command! ES :let g:ale_linters = { 'javascript': ['eslint'] } | :let g:ale_fixers = { 'javascript': ['eslint'] }
"
" Lint js with xo
command! XO :let g:ale_linters = { 'javascript': ['xo'] } | :let g:ale_fixers = { 'javascript': [] }

" Lint js with standard
command! ST :let g:ale_linters = { 'javascript': ['standard'] } | :let g:ale_fixers = { 'javascript': ['standard'] }

" Disable js linters
command! NO :let g:ale_linters = { 'javascript': [] } | :let g:ale_fixers = { 'javascript': [] }


"
" Key mapping
"

" Remap leader key
let mapleader = ","

" Ctrl+s saves file in normal/insert mode
nnoremap <c-s> <esc>:w<CR>
inoremap <c-s> <esc>:w<CR>

" Format file indentation
nnoremap <Leader><Tab> <esc>gg=G``zz

" Open ACK search tool for current word
nnoremap <Leader>f :Ack <cword><cr>

" Open fuzzy finder
nnoremap <C-p> :FZF<CR>

" Go to tag
nnoremap ] <c-]>

" Use Tab for emmet
imap <expr> <tab> emmet#expandAbbrIntelligent("\<tab>")

" Disable arrow keys
nnoremap <Up> <Nop>
nnoremap <Down> <Nop>
nnoremap <Left> <Nop>
nnoremap <Right> <Nop>

" Easier block indentation
vnoremap < <gv
vnoremap > >gv

" Identify the syntax group of the word at the cursor
map <Leader>h :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
      \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
      \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

"
" Autocommands
"

" Resizing window resets splits
autocmd VimResized * execute "normal! \<c-w>="

" Reload vimrc file on save
autocmd! bufwritepost .vimrc source $MYVIMRC

" Reload gitgutter on save
autocmd BufWritePost * GitGutter

"
" Indentation settings (let editorconfig handle number of spaces)
"
set expandtab shiftround smartindent autoindent

"
" PLUGINS. VimPlug will download and install all of them
"

" Start plugins
call plug#begin('~/.vim/plugged')

" Git plugins
Plug 'airblade/vim-gitgutter'                   " Show changes on each line
Plug 'tpope/vim-fugitive'                       " A lot of awesome things with git

" Editting tools
Plug 'terryma/vim-multiple-cursors'             " Find all and edit
Plug 'tpope/vim-commentary'                     " Toggle comments
Plug 'christoomey/vim-system-copy'              " Copy to system clipboard with 'cp'
Plug 'tpope/vim-surround'                       " Surround words with brackets/quoutes/etc

" Search tools
Plug 'mileszs/ack.vim'                          " Find in all files
Plug 'brooth/far.vim'                           " Find and replace in all files
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }

" Navigation tools
Plug 'christoomey/vim-tmux-navigator'           " Navigation between vim/tmux panes

" File tools
Plug 'danro/rename.vim'                         " Rename the current file with :rename

" Html tools
Plug 'mattn/emmet-vim'                          " Very cool html snippets
Plug 'gregsexton/MatchTag'                      " Highlight matching html tag

" Syntax tools
Plug 'w0rp/ale'                                 " Async syntax checker
Plug 'editorconfig/editorconfig-vim'            " Use custom indentation and syntax (global/project .editorconfig)
Plug 'leafgarland/typescript-vim'               " Typescript syntax
Plug 'mxw/vim-jsx'                              " Jsx syntax
Plug 'jiangmiao/auto-pairs'                     " Type { and it will be {|}
Plug 'pangloss/vim-javascript'                  " Improved JS syntax
Plug 'prettier/vim-prettier'                    " Prettier JS

" Project tools
Plug 'wakatime/vim-wakatime'                    " Time tracker

" Colors
Plug 'pablopunk/colors.vim'                     " My colorschemes

" End of plugins
call plug#end()

"
" Settings after plugins
"

" Colors configuration
if exists('$TMUX') " Make tmux have the right colors
  " Colors in tmux
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif
set termguicolors
colorscheme mono


" Settings for ale syntax checker
let g:ale_completion_enabled = 1 " Try to complete stuff
let g:ale_completion_max_suggestions = 10
let g:ale_fix_on_save = 1  " FIX files on save
let sd = matchstr(getcwd(), 'superdesk')
if empty(sd) " if it's not superdesk, use standard
  let g:ale_linters = { 'javascript': ['standard'] } | :let g:ale_fixers = { 'javascript': ['standard'] }
else " if it's superdesk, use eslint
  let g:ale_linters = { 'javascript': ['eslint'] } | :let g:ale_fixers = { 'javascript': ['eslint'] }
endif
" Disable for html
let g:ale_pattern_options = {
\   '.*\.html$': {'ale_enabled': 0}
\}


" Ack uses 'ag' instead of 'grep'
let g:ackprg = 'ag --nogroup --nocolor --column'

" ALLOW JSX SYNTAX IN JS
let g:jsx_ext_required = 0
