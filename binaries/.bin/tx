#!/usr/bin/env bash

all_directories() {
  find ~/src ~/src/maze ~/desktop ~/downloads ~/ -mindepth 1 -maxdepth 1 -type d | sed "s|$HOME|~|g" | sed 's|//|/|g'
}

fzf_short() {
  fzf --height=10 --reverse "$@"
}

go_to_session() {
  local session_name=$1
  if [[ -z $TMUX ]]; then
    tmux attach -t "$session_name" || tmux new-session -s "$session_name" -c "$selected"
  else
    tmux switch-client -t "$session_name"
  fi
  exit 0
}

if [[ $# -eq 1 ]]; then
  # Attempt to find an existing tmux session that matches the provided name
  selected_name=$(tmux ls | cut -d: -f1 | grep "$1")
  # If multiple sessions are found, use fzf to allow the user to select one
  if [[ $(echo "$selected_name" | wc -l) -gt 1 ]]; then
    selected_name=$(echo "$selected_name" | fzf_short)
  fi
  # If a session name is selected or uniquely identified, go to that session
  if [[ -n $selected_name ]]; then
    go_to_session "$selected_name"
  fi
  # Search for directories matching the argument
  dir_matches=$(all_directories | grep -i "$1")
  match_count=$(echo "$dir_matches" | grep -c .)
  # If exactly one match is found, select it automatically
  if [[ $match_count -eq 1 ]]; then
    selected="$dir_matches"
  elif [[ $match_count -gt 1 ]]; then
    # If more than one match, use fzf for selection
    selected=$(echo "$dir_matches" | fzf_short -q "$1")
  else
    # If no specific match, show all directories with fzf
    selected=$(all_directories | fzf_short)
  fi
else
  # If no argument is provided, list all directories for selection
  selected=$(all_directories | fzf_short)
fi

[[ -z $selected ]] && exit 0

# Convert the selected path back to an absolute path if it was shortened
selected=$(echo "$selected" | sed "s|~|$HOME|g")
# Session name is the last folder name of the selected path
selected_name=$(basename "$selected")
tmux_running=$(pgrep tmux)

# If not in a TMUX session and TMUX is running, try to go to or create the session
if [[ -z $TMUX ]] && [[ -n $tmux_running ]]; then
  go_to_session "$selected_name"
fi

# If the session does not exist, create it in detached mode; otherwise, go to the session
if ! tmux has-session -t="$selected_name" 2> /dev/null; then
  tmux new-session -s "$selected_name" -c "$selected"
else
  go_to_session "$selected_name"
fi

