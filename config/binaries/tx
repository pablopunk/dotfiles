#!/usr/bin/env bash

dirs="$HOME/src $HOME/src/maze $HOME/src/raycast $HOME/Desktop $HOME/Downloads $HOME $HOME/.worktrees"

for dir in $dirs; do
  mkdir -p $dir
done

all_directories() {
  find $dirs -mindepth 1 -maxdepth 1 -type d | sed "s|$HOME|~|g" | sed 's|//|/|g'
}

fzf_short() {
  fzf --height=10 --reverse "$@"
}

go_to_session() {
  local session_name=$1
  # replace . with _
  session_name=$(echo "$session_name" | tr . _)
  # Attempt to attach or switch to the session if it exists, otherwise create it in detached mode
  if ! tmux has-session -t "$session_name" 2>/dev/null; then
    tmux new-session -d -s "$session_name" -c "$selected"
  fi
  # Attach or switch to the session based on whether we're inside TMUX
  [[ -z $TMUX ]] && tmux attach -t "$session_name" || tmux switch-client -t "$session_name"
  exit 0
}

if [[ $# -eq 0 ]]; then
  # List tmux sessions for selection if any exist
  # You can ctrl+c to skip selecting a tmux session (and just select a directory instead)
  tmux_sessions=$(tmux ls 2>/dev/null | cut -d: -f1)
  if [[ -n $tmux_sessions ]]; then
    selected_session=$(echo "$tmux_sessions" | fzf_short --prompt="tmux sessions: ")
    if [[ -n $selected_session ]]; then
      go_to_session "$selected_session"
      exit 0
    fi
  fi
fi

if [[ $# -eq 1 ]]; then
  # Attempt to find an existing tmux session that matches the provided name
  selected_name=$(tmux ls 2>/dev/null | cut -d: -f1 | grep "$1")
  # If multiple sessions are found, use fzf to allow the user to select one
  if [[ $(echo "$selected_name" | wc -l) -gt 1 ]]; then
    selected_name=$(echo "$selected_name" | fzf_short)
  fi
  # If a session name is selected or uniquely identified, go to that session
  if [[ -n $selected_name ]]; then
    go_to_session "$selected_name"
  fi
  # Search for directories matching the argument
  dir_matches=$(all_directories | grep -i "$1")
  match_count=$(echo "$dir_matches" | grep -c .)
  # If exactly one match is found, select it automatically
  if [[ $match_count -eq 1 ]]; then
    selected="$dir_matches"
  elif [[ $match_count -gt 1 ]]; then
    # If more than one match, use fzf for selection
    selected=$(echo "$dir_matches" | fzf_short -q "$1")
  else
    # If no specific match, show all directories with fzf
    selected=$(all_directories | fzf_short)
  fi
else
  # If no argument is provided, list all directories for selection
  selected=$(all_directories | fzf_short)
fi

[[ -z $selected ]] && exit 0

# Convert the selected path back to an absolute path if it was shortened
selected=$(echo "$selected" | sed "s|~|$HOME|g")
# Session name is the last folder name of the selected path
selected_name=$(basename "$selected")

go_to_session "$selected_name"
