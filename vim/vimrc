" vim:fileencoding=utf-8:ft=vim:foldmethod=marker

" General settings {{{
filetype plugin on
syntax on
set nocompatible ttyfast lazyredraw incsearch hlsearch infercase encoding=utf-8 mouse=a hidden autoread number tabstop=2 shiftwidth=2 softtabstop=2 expandtab smarttab autoindent shiftround wrap ignorecase smartcase cursorline termguicolors backspace=indent,eol,start splitright splitbelow iskeyword+=-
try
  set signcolumn=number        " Show line numbers and signs on the same column"
catch
  set signcolumn=yes           " Fallback for older versions
endtry
" }}}

" Key mapping {{{
" Remap leader key
let mapleader = "\<space>"
" Disable Ex Mode
nmap Q <Nop>
" Ctrl+c is ESC (it is by default but it won't trigger autocommands)
imap <c-c> <esc>
" Ctrl+hjkl moves split focus
nmap <c-h> <c-w>h
nmap <c-j> <c-w>j
nmap <c-k> <c-w>k
nmap <c-l> <c-w>l
" Use + to select all word matches
nmap + *N
" Center match when navigating through search results
nnoremap n nzz
nnoremap N Nzz
nnoremap * *zz
" Ctrl+t new tab
nmap <c-t> :tabe<cr>
" Ctrl+q close buffer
nmap <c-q> :bd<cr>
" Ctrl+s to save
nmap <c-s> :w<cr>
" Use system clipboard (reg *)
nmap <leader>cp "*y
vmap <leader>cp "*y
nmap <leader>p "*p
vmap <leader>p "*p
" Y should not be the same as yy
nmap Y y$
" Navigate buffers
" nmap <leader><leader> :ls<CR>:b<Space>
nmap gb :bprev<cr>
nmap gn :bnext<cr>
" Disable arrow keys
nmap <Up> <Nop>
nmap <Down> <Nop>
nmap <Left> <Nop>
nmap <Right> <Nop>
" Easier block indentation
nnoremap > >>
nnoremap < <<
vnoremap > >gv
vnoremap < <gv
" Search and replace in file/line (selection or word)
vnoremap <c-n> "9y:%s/<c-r>9/<c-r>9/g<left><left>
nnoremap <c-n> viw"9y:%s/<c-r>9/<c-r>9/g<left><left>
vnoremap <leader>n "9y:s/<c-r>9/<c-r>9/g<left><left>
nnoremap <leader>n viw"9y:s/<c-r>9/<c-r>9/g<left><left>
" Map ESC key to exit insert mode in :terminal (vim8 or neovim)
if has('terminal') || has('nvim')
  tmap <Esc> <C-\><C-n>
endif
" Remove highlights
nmap <silent> <leader>h :noh<cr>
" }}}

" Autocommands {{{
" I don't wanna save changes to a directory ¬¬
autocmd FileType netrw setl bufhidden=delete
augroup templates
  autocmd!
  autocmd BufNewFile *.tsx,*.jsx
    \ 0r $HOME/.config/nvim/templates/react.tsx |
    \ %s/FILENAME/\=expand('%:t:r')/g
  autocmd BufNewFile *_document.*
    \ 0r $HOME/.config/nvim/templates/_document.tsx
  autocmd BufNewFile *.json
    \ 0r $HOME/.config/nvim/templates/empty.json |
    \ exe "normal ggo"
augroup end
" }}}

" Abbreviations {{{
iabbr widht width
iabbr heigth height
iabbr lenght length
iabbr ligth light
iabbr rigth right
iabbr ireact import React from 'react'
iabbr fcreact const Component = () =>
iabbr ccreact class Component extends React.Component
" }}}

" File finder and project search {{{
" Better :find
set path+=** " Search files subdirectories
set wildmenu " Allow autocomplete on 'find' command
set wildignore+=**/node_modules/**
set wildignore+=**/dist/**
function! FindFiles(filename)
  let error_file = tempname()
  echo error_file
  silent exe '!fd -t f '.a:filename.' | xargs file | sed "s/:/:1:/" > '.error_file
  set errorformat=%f:%l:%m
  exe "cfile ". error_file
  copen
  if line('$') == 1
    wincmd w
  endif
  call delete(error_file)
endfunction
command! -nargs=1 Find call FindFiles(<q-args>)
nmap <leader>ff :Find<space>
" Better :grep
set grepprg=rg\ --vimgrep\ --follow\ --max-columns=1000\ --case-sensitive
set grepformat=%f:%l:%c:%m,%f:%l:%m
function! Grep(...)
  return system(join([&grepprg] + a:000), ' ')
endfunction
command! -nargs=+ -complete=file_in_path -bar Grep      cgetexpr Grep(<f-args>)
command! -nargs=+ -complete=file_in_path -bar GrepWord  cgetexpr Grep(<f-args> . ' -w')
augroup quickfix
  autocmd!
  autocmd QuickFixCmdPost cgetexpr cwindow
augroup END
nmap <leader>fs :Grep<space><space>.<left><left>
nmap <leader>fw :GrepWord<space><c-r><c-w><space>.<cr>
vmap <leader>fw "9y:Grep<space>'<c-r>9'<space>.<cr>
" }}}

" Color config {{{
set background=dark
colorscheme habamax
" Fix for kitty terminal colors after scrolling
hi Normal guifg=NONE guibg=NONE ctermfg=NONE ctermbg=NONE
" }}}
