"
" Some general settings
"

filetype plugin indent on
syntax on

set ttyfast               " Faster redrawing
set lazyredraw            " Only when necessary
set encoding=utf-8        " Unicode
set incsearch             " Incremental search
set hlsearch              " Highlight search term
set ignorecase            " Search is case insensitive
set smartcase             " Unless your search has capital letters
set mouse=a               " Allow mouse integration


" Delete key sometimes does not work, here's the fix
set backspace=indent,eol,start


"
" Key mapping
"

" Remap leader key
let mapleader = ","

" Disable Ex Mode
nnoremap Q <Nop>

" Ctrl+c is ESC (it is by default but it won't trigger autocommands)
inoremap <c-c> <esc>

" Ctrl+s saves file in normal/insert mode
nnoremap <c-s> <esc>:w<CR>
inoremap <c-s> <esc>:w<CR>

" Ctrl+hjkl moves split focus
nnoremap <c-h> <c-w>h
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-l> <c-w>l

" Space to scroll in normal mode
nnoremap <space> <c-d>

" Ctrl+t new tab
nnoremap <c-t> <esc>:tabe<cr>

" Ctrl+q close file
nnoremap <c-q> <esc>:q<cr>

" Format file indentation
nnoremap <Leader><Tab> <esc>gg=G``zz

" Open ACK search tool for current word
nnoremap <Leader>f :Ack <cword><cr>

" Navigate through git changes on file
nnoremap <Leader>g :GitGutterNextHunk<cr>
nnoremap <Leader>G :GitGutterPrevHunk<cr>

" Navigate through ALE's error/warnings
nnoremap <Leader>a :ALENext<cr>
nnoremap <Leader>A :ALEPrevious<cr>

" Open terminal
nnoremap <Leader>t :terminal<cr>
inoremap <Leader>t <esc>:terminal<cr>

" Open .vimrc
nnoremap <Leader>v :e ~/.vimrc<cr>

" 0 goes to first indentation
nnoremap 0 ^

" Go to tag
nnoremap ] :ALEGoToDefinition<CR>

" Use CtrlP to search in buffers with leader+,
nnoremap <Leader>, :CtrlPBuffer<cr>

" Use CtrlP to search in the current file dir
nnoremap <c-s-p> :CtrlPCurFile<cr>

" Use leader+1 to open todo.txt on new tab
nnoremap <Leader>1 :tabe ~/todo.txt<cr>

" Use Tab for emmet
imap <expr> <tab> emmet#expandAbbrIntelligent("\<tab>")

" Use ctrl+F to trigger file completion
inoremap <c-f> <c-x><c-f>

" Disable arrow keys
nnoremap <Up> <Nop>
nnoremap <Down> <Nop>
nnoremap <Left> <Nop>
nnoremap <Right> <Nop>

" Easier block indentation
vnoremap < <gv
vnoremap > >gv

" Map ESC key to exit insert mode in :terminal (vim8 or neovim)
if has('terminal') || has('nvim')
  tnoremap <Esc> <C-\><C-n>
endif

" Identify the syntax group of the word at the cursor
map <Leader>h :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
      \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
      \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

"
" Autocommands
"

" Reload gitgutter on save
autocmd BufWritePost * GitGutter

"
" Indentation settings (let editorconfig handle number of spaces)
"
set expandtab shiftround smartindent autoindent

"
" PLUGINS. VimPlug will download and install all of them
"

" Start plugins
call plug#begin('~/.vim/plugged')

" Git plugins
Plug 'airblade/vim-gitgutter'                   " Show changes on each line
Plug 'tpope/vim-fugitive'                       " A lot of awesome things with git

" Editting tools
Plug 'pablopunk/persistent-undo.vim'            " Persistent undo across sessions
Plug 'pablopunk/hot-reload.vim'                 " Reload vimrc on save
Plug 'pablopunk/dynamic-file-completion.vim'    " Current directory for <c-x><c-f>
Plug 'terryma/vim-multiple-cursors'             " Find all and edit
Plug 'tpope/vim-commentary'                     " Toggle comments
Plug 'christoomey/vim-system-copy'              " Copy to system clipboard with 'cp'
Plug 'tpope/vim-surround'                       " Surround words with brackets/quoutes/etc
Plug 'jiangmiao/auto-pairs'                     " Autoclose brackets, etc

" Search tools
Plug 'pablopunk/better-find.vim'                " Better find command
Plug 'mileszs/ack.vim'                          " Find in all files
Plug 'brooth/far.vim'                           " Find and replace in all files
Plug 'ctrlpvim/ctrlp.vim'                       " Fuzzy finder

" File tools
Plug 'danro/rename.vim'                         " Rename the current file with :Rename

" Html tools
Plug 'mattn/emmet-vim'                          " Very cool html snippets
Plug 'gregsexton/MatchTag'                      " Highlight matching html tag

" Syntax tools
Plug 'w0rp/ale'                                 " Syntax checker
Plug 'editorconfig/editorconfig-vim'            " Use custom indentation and syntax (global/project .editorconfig)
Plug 'prettier/vim-prettier'                    " Prettier JS
Plug 'leafgarland/typescript-vim'               " Typescript syntax
Plug 'mxw/vim-jsx'                              " Jsx syntax
Plug 'pangloss/vim-javascript'                  " Improved JS syntax

" Colors
Plug 'pablopunk/transparent.vim'                " Make vim transparent
Plug 'connorholyday/vim-snazzy'                 " snazzy colors

" End of plugins
call plug#end()

"
" Settings after plugins
"

" Colors configuration
if has('nvim')
  set termguicolors
endif
set background=dark
colorscheme snazzy
" Italic comments
hi Comment gui=italic cterm=italic
" Search terms underlined (no bg)
hi Search guifg=orange guibg=NONE gui=underline

" CtrlP config
let g:ctrlp_user_command = 'fd --type file --color never "" %s -E po/'

" Ale config
let g:ale_sign_error = '•'
let g:ale_sign_warning = '•'
let g:ale_lint_on_enter = 1
let g:ale_lint_on_save = 1
let g:ale_fix_on_save = 1
let g:ale_completion_enabled = 1
let g:ale_linters = { 'javascript': [], 'typescript': [] }
let g:ale_fixers = { 'javascript': [], 'typescript': [] }
let g:ale_linters.javascript = ['standard']
let g:ale_fixers.javascript = ['standard']
let g:ale_linters.typescript = ['tsserver', 'standard']
let g:ale_fixers.typescript = ['tslint', 'standard']
let sd = matchstr(getcwd(), 'superdesk')
if !empty(sd)
  let g:ale_linters.javascript = ['eslint']
  let g:ale_fixers.javascript = ['eslint']
endif


" Ack uses 'ag' instead of 'grep'
let g:ackprg = 'ag --nogroup --column'

" ALLOW JSX SYNTAX IN JS
let g:jsx_ext_required = 0

" Commands
command! Eslint
  \ :let g:ale_linters.javascript = ['eslint'] |
  \ :let g:ale_linters.typescript = ['eslint'] |
  \ :let g:ale_fixers.javascript = ['eslint'] |
  \ :let g:ale_fixers.typescript = ['eslint']
command! Standard
  \ :let g:ale_linters.javascript = ['standard'] |
  \ :let g:ale_linters.typescript = ['standard'] |
  \ :let g:ale_fixers.javascript = ['standard'] |
  \ :let g:ale_fixers.typescript = ['standard']
command! Xo
  \ :let g:ale_linters.javascript = ['xo'] |
  \ :let g:ale_linters.typescript = ['xo'] |
  \ :let g:ale_fixers.javascript = ['xo'] |
  \ :let g:ale_fixers.typescript = ['xo']
command! NoLint
  \ :let g:ale_linters.javascript = [] |
  \ :let g:ale_linters.typescript = [] |
  \ :let g:ale_fixers.javascript = [] |
  \ :let g:ale_fixers.typescript = []
