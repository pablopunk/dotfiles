"
" Some general settings
"

set nocompatible
filetype plugin indent on
syntax on

set ttyfast                    " Faster redrawing
set lazyredraw                 " Only when necessary
set encoding=utf-8             " Unicode
set incsearch                  " Incremental search
set hlsearch                   " Highlight search term
set ignorecase                 " Search is case insensitive
set smartcase                  " Unless your search has capital letters
set mouse=a                    " Allow mouse integration
set backspace=indent,eol,start " Fix delete key
set noshowmode                 " Don't show the mode you're in
set hidden                     " Can navigate through buffers even if they're not saved
set autoread                   " Re-read files if unmodified
set linebreak                  " Avoid wrapping lines in the middle of a word.
set number                     " Line numbers
set scrolloff=3                " Spacing on top and bottom
set laststatus=2               " Hide bottom status line
set shortmess+=I               " Don't show :intro
set signcolumn=number        " Show line numbers and signs on the same column"
set expandtab shiftround smartindent autoindent " Indent stuff

"
" Key mapping
"

" Remap leader key
let mapleader = "\<space>"

" Disable Ex Mode
nmap Q <Nop>

" Ctrl+c is ESC (it is by default but it won't trigger autocommands)
imap <c-c> <esc>

" Ctrl+hjkl moves split focus
nmap <c-h> <c-w>h
nmap <c-j> <c-w>j
nmap <c-k> <c-w>k
nmap <c-l> <c-w>l

" Use + to select all word matches
nmap + *N

" Ctrl+t new tab
nmap <c-t> :tabe<cr>

" Ctrl+q close buffer
nmap <c-q> :bd<cr>

" Ctrl+s to save
nmap <c-s> :w<cr>

" Format file
nmap <silent> <leader><Tab> :CocCommand tsserver.executeAutofix \| CocCommand prettier.formatFile<cr>
vmap <silent> <leader><Tab> <Plug>(coc-format-selected)
xmap <silent> <leader><Tab> <Plug>(coc-format-selected)

" Open terminal
nmap <leader>t :terminal<cr>

" Open .vimrc
nmap <leader>v :e ~/.vimrc<cr>

" Use system clipboard (reg *)
nmap <leader>cp "*y
vmap <leader>cp "*y
nmap <leader>p "*p
vmap <leader>p "*p

" Y should not be the same as yy
nmap Y y$

" Navigate buffers
nmap <leader><leader> :ls<CR>:b<Space>
nmap <c-space> :b#<CR>

" Disable arrow keys
nmap <Up> <Nop>
nmap <Down> <Nop>
nmap <Left> <Nop>
nmap <Right> <Nop>

" Easier block indentation
nnoremap > >>
nnoremap < <<
vnoremap > >gv
vnoremap < <gv
" ctrl+i is mapped to Tab so is not the opposite of ctrl+o anymore

" Search and replace in file/line (selection or word)
vnoremap <c-n> "9y:%s/<c-r>9/<c-r>9/g<left><left>
nnoremap <c-n> viw"9y:%s/<c-r>9/<c-r>9/g<left><left>
vnoremap <leader>n "9y:s/<c-r>9/<c-r>9/g<left><left>
nnoremap <leader>n viw"9y:s/<c-r>9/<c-r>9/g<left><left>

" Map ESC key to exit insert mode in :terminal (vim8 or neovim)
if has('terminal') || has('nvim')
  tmap <Esc> <C-\><C-n>
endif

" Identify the syntax group of the word at the cursor
nmap <leader>H :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
      \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
      \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" Remove highlights
nmap <silent> <leader>h :noh<cr>

"
" Autocommands
"

" I don't wanna save changes to a directory ¬¬
autocmd FileType netrw setl bufhidden=delete

augroup templates
  autocmd!
  autocmd BufNewFile *.tsx,*.jsx
    \ 0r $HOME/.config/nvim/templates/react.tsx |
    \ exe "normal /template\<cr>diw"
  autocmd BufNewFile *_document.*
    \ 0r $HOME/.config/nvim/templates/_document.tsx
  autocmd BufNewFile *.json
    \ 0r $HOME/.config/nvim/templates/empty.json |
    \ exe "normal ggo"
augroup end

augroup LuaHighlight
  autocmd!
  autocmd TextYankPost * silent! lua require'vim.highlight'.on_yank()
augroup END

" Better :find
set path+=**
function! FindFiles(filename)
  let error_file = tempname()
  echo error_file
  silent exe '!fd -t f '.a:filename.' | xargs file | sed "s/:/:1:/" > '.error_file
  set errorformat=%f:%l:%m
  exe "cfile ". error_file
  copen
  call delete(error_file)
endfunction
command! -nargs=1 Find call FindFiles(<q-args>)
nmap <c-p> :Find<space>

" Better :grep
set grepprg=rg\ --vimgrep
function! Grep(...)
  return system(join([&grepprg] + a:000), ' ')
endfunction
command! -nargs=+ -complete=file_in_path -bar Grep      cgetexpr Grep(<f-args>)
command! -nargs=+ -complete=file_in_path -bar GrepWord  cgetexpr Grep(<f-args> . ' -w')
augroup quickfix
  autocmd!
  autocmd QuickFixCmdPost cgetexpr cwindow
augroup END
nmap <c-f> :Grep<space>
nmap <leader>f :GrepWord<space><c-r><c-w><cr>
vmap <leader>f "9y:Grep<space>'<c-r>9'<cr>

"
" Abbreviations
"
iabbr widht width
iabbr heigth height
iabbr lenght length
iabbr ligth light
iabbr rigth right
iabbr ireact import React from 'react'
iabbr fcreact const Component = () =>
iabbr ccreact class Component extends React.Component

"
" PLUGINS. VimPlug will download and install all of them
"

" Start plugins
call plug#begin('~/.vim/plugged')

"
" PROJECT
"
Plug 'tpope/vim-fugitive'
command! Conflicts Gvdiffsplit!
nnoremap <leader>dh :diffget //2<cr>
nnoremap <leader>dl :diffget //3<cr>
Plug 'tpope/vim-rhubarb'
Plug 'editorconfig/editorconfig-vim'
Plug 'tpope/vim-sensible'
Plug 'pablopunk/native-sidebar.vim'

"
" KEYBINDINGS
"
Plug 'christoomey/vim-tmux-navigator'

"
" EDIT
"
Plug 'pablopunk/persistent-undo.vim'
Plug 'pablopunk/hot-reload.vim', { 'for': 'vim' }
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'mattn/emmet-vim'
imap <c-e> <plug>(emmet-expand-abbr)

"
" SEARCH
"
Plug 'markonm/traces.vim'

"
" SYNTAX
"
Plug 'pangloss/vim-javascript'
let g:jsx_ext_required = 0
Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript'
Plug 'styled-components/vim-styled-components', { 'branch': 'main' }
Plug 'jparise/vim-graphql'
Plug 'keith/swift.vim'
Plug 'evanleck/vim-svelte'

"
" LSP
"
Plug 'neoclide/coc.nvim', {'branch': 'release'}
let g:coc_global_extensions = [
  \ 'coc-eslint',
  \ 'coc-git',
  \ 'coc-github',
  \ 'coc-pairs',
  \ 'coc-prettier',
  \ 'coc-react-refactor',
  \ 'coc-snippets',
  \ 'coc-styled-components',
  \ 'coc-tslint',
  \ 'coc-tsserver',
  \]
set shortmess+=c
set updatetime=300
" Faster python detection
let g:python3_host_prog = system('which python3')[:-2]
" Go to def
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
" Navigate through git changes on file
nmap ) <Plug>(coc-git-nextchunk)
nmap ( <Plug>(coc-git-prevchunk)
nmap <leader>u :CocCommand git.chunkUndo<cr>
" Use K for documentation including Coc
nmap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction
" Coc commands and stuff
nmap <silent> ge <Plug>(coc-diagnostic-next-error)
nmap <silent> gE <Plug>(coc-diagnostic-prev-error)
nmap <leader>r <Plug>(coc-rename)
nmap <leader>cl :CocList<cr>
nmap <leader>ca :CocAction<cr>
vmap <leader>ca :CocAction<cr>
command! -nargs=? Fold :call CocAction('fold', <f-args>)
" Enable insert line for coc-pairs and also use enter to choose from code
" completion
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
command! -nargs=0 Prettier :CocCommand prettier.formatFile
" Plug 'neovim/nvim-lspconfig'
" lua <<EOF
" require'nvim_lsp'.tsserver.setup{}
" EOF


"
" COLORS
"
" Plug 'pablopunk/sick.vim'
" Plug 'pablopunk/sunset.vim'
" Plug 'morhetz/gruvbox'
" Plug 'arzg/vim-colors-xcode'
Plug 'joshdick/onedark.vim'
" Plug 'bluz71/vim-nightfly-guicolors'
" Plug 'jcherven/jummidark.vim'
" Plug 'zefei/simple-dark'
" Plug 'arcticicestudio/nord-vim'
Plug 'pablopunk/transparent.vim'
" Plug 'pablopunk/statusline.vim'
Plug 'edkolev/tmuxline.vim'

"
" End of plugins
"
call plug#end()

" Custom commands
command! ImportES6 :execute "normal! 0ciwimport\<esc>f=hdt'i from \<esc>f)xj0"
command! ConstImport :execute "normal! 0ciwconst\<esc>/from\<cr>ciw= require(\<esc>lxA)\<esc>"
command! MetaResponsiveTag :execute "normal! i<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\<esc>"
command! HotReload autocmd BufWritePost *.vim source %
"
" Color config
set termguicolors
colorscheme onedark
