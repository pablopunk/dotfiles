"
" Some general settings
"

set nocompatible
filetype plugin indent on
syntax on

set ttyfast                    " Faster redrawing
set lazyredraw                 " Only when necessary
set encoding=utf-8             " Unicode
set incsearch                  " Incremental search
set hlsearch                   " Highlight search term
set ignorecase                 " Search is case insensitive
set smartcase                  " Unless your search has capital letters
set mouse=a                    " Allow mouse integration
set backspace=indent,eol,start " Fix delete key
set showtabline=2              " Always show tabs
set cursorline                 " Highlight cursor line
set noshowmode                 " Don't show the mode you're in
set hidden                     " Can navigate through buffers even if they're not saved
set number                     " Don't worry I'll change this quick


"
" Key mapping
"

" Remap leader key
let mapleader = "\<space>"

" Disable Ex Mode
nnoremap Q <Nop>

" Ctrl+c is ESC (it is by default but it won't trigger autocommands)
inoremap <c-c> <esc>

" Ctrl+s saves file in normal/insert mode
nnoremap <c-s> <esc>:w<CR>
inoremap <c-s> <esc>:w<CR>

" Ctrl+x saves and closes the window
nnoremap <c-x> <esc>:x<CR>

" Ctrl+hjkl moves split focus
nnoremap <c-h> <c-w>h
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-l> <c-w>l

" Navigate through buffers
nnoremap gn :bn<cr>
nnoremap gb :bp<cr>

" Ctrl+t new tab
nnoremap <c-t> :tabe<cr>

" Ctrl+q close buffer
nnoremap <c-q> :bd<cr>

" Format file indentation
nnoremap <leader><Tab> <esc>gg=G``zz

" Open ACK search tool for current word
nnoremap <leader>f :Ack <cword><cr>

" Navigate through git changes on file
nnoremap <leader>g :GitGutterNextHunk<cr>
nnoremap <leader>G :GitGutterPrevHunk<cr>

" Toggle bookmark on line
nnoremap <leader>b :BookmarkToggle<cr>

" Navigate bookmarks
nnoremap <leader>n :BookmarkNext<cr>
nnoremap <leader>N :BookmarkPrev<cr>
nnoremap <leader>B :BookmarkShowAll<cr>

" Open terminal
nnoremap <leader>t :terminal<cr>

" Open .vimrc
nnoremap <leader>v :e ~/.vimrc<cr>

" 0 goes to first indentation
nnoremap 0 ^

" Toggle zen mode
nnoremap <leader>z :Goyo<cr>

" Use CtrlP to search in buffers with leader+leader
nnoremap <leader><leader> :CocList<cr>

" Use CtrlP to search in the current file dir
nnoremap <c-s-p> :CtrlPCurWD<cr>

" Use leader+1 to open todo.txt on new tab
nnoremap <leader>1 :tabe ~/todo.txt<cr>

" Use Tab for emmet
imap <silent> <expr> <tab> emmet#expandAbbrIntelligent("\<tab>")

" Use ctrl+F to trigger file completion
inoremap <c-f> <c-x><c-f>

" Disable arrow keys
nnoremap <Up> <Nop>
nnoremap <Down> <Nop>
nnoremap <Left> <Nop>
nnoremap <Right> <Nop>

" Easier block indentation
nnoremap <tab> >>
nnoremap <s-tab> <<
vnoremap <tab> >gv
vnoremap <s-tab> <gv

" Map ESC key to exit insert mode in :terminal (vim8 or neovim)
if has('terminal') || has('nvim')
  tnoremap <Esc> <C-\><C-n>
endif

" Identify the syntax group of the word at the cursor
map <leader>H :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
      \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
      \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

"
" Autocommands
"

" Reload gitgutter on save
autocmd BufWritePost * GitGutter

"
" Indentation settings (let editorconfig handle number of spaces)
"
set expandtab shiftround smartindent autoindent

"
" PLUGINS. VimPlug will download and install all of them
"

" Start plugins
call plug#begin('~/.vim/plugged')

" Project
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'editorconfig/editorconfig-vim'

" Keybindings
Plug 'christoomey/vim-tmux-navigator'
Plug 'christoomey/vim-system-copy'

" Edit
Plug 'pablopunk/persistent-undo.vim'
Plug 'pablopunk/hot-reload.vim', { 'for': 'vim' }
Plug 'pablopunk/dynamic-file-completion.vim', { 'for': [ 'javascript', 'typescript' ] }
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'vim-scripts/auto-pairs-gentle'

" Search
Plug 'pablopunk/better-find.vim'
Plug 'mileszs/ack.vim'
Plug 'brooth/far.vim'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'MattesGroeger/vim-bookmarks'

" File tools
Plug 'danro/rename.vim', { 'on': 'Rename' }

" Html tools
Plug 'mattn/emmet-vim', { 'for': [ 'javascript.jsx', 'typescript.jsx', 'typescript', 'html', 'markdown' ] }
Plug 'gregsexton/MatchTag'

" Syntax tools
Plug 'prettier/vim-prettier', { 'for': [ 'javascript', 'typescript', 'json', 'javascript.jsx', 'typescript.jsx' ] }
Plug 'sheerun/vim-polyglot' " It already workds on demand

" Autocomplete
Plug 'neoclide/coc.nvim', {'do': { -> coc#util#install()}}
Plug 'neoclide/coc-tsserver', {'do': 'yarn install --frozen-lockfile'}
Plug 'neoclide/coc-html', {'do': 'yarn install --frozen-lockfile'}
Plug 'neoclide/coc-json', {'do': 'yarn install --frozen-lockfile'}

" UI
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'junegunn/goyo.vim', { 'on': 'Goyo' }

" Colors
Plug 'connorholyday/vim-snazzy' " Snazzy colors
Plug 'pablopunk/transparent.vim' " Transparent background

" End of plugins
call plug#end()

"
" Settings after plugins
"

" Colors configuration
if has('nvim')
  set termguicolors
endif
set background=dark
colorscheme snazzy
hi Search guifg=orange guibg=NONE gui=underline
hi Comment gui=italic
hi String gui=italic
" Current line color
hi CursorLine guibg=#353535

" Statusline config
let g:airline_theme='base16_ashes'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline_section_error = '%{airline#util#wrap(airline#extensions#coc#get_error(),0)}'
let g:airline_section_warning = '%{airline#util#wrap(airline#extensions#coc#get_warning(),0)}'

" CtrlP config
let g:ctrlp_user_command = 'fd --type file --color never "" %s -E po/'

" Bookmarks config
let g:bookmark_sign = 'â™¥'
hi BookmarkSign guifg=#ff4920 guibg=#3c3836

" Ack uses 'ag' instead of 'grep'
let g:ackprg = 'ag --nogroup --column'

" ALLOW JSX SYNTAX IN JS
let g:jsx_ext_required = 0
