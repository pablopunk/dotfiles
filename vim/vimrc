
" Some general settings
"

set nocompatible
filetype plugin indent on
syntax on

set ttyfast                    " Faster redrawing
set lazyredraw                 " Only when necessary
set encoding=utf-8             " Unicode
set incsearch                  " Incremental search
set hlsearch                   " Highlight search term
set ignorecase                 " Search is case insensitive
set smartcase                  " Unless your search has capital letters
set mouse=a                    " Allow mouse integration
set backspace=indent,eol,start " Fix delete key
set showtabline=2              " Always show tabs
set cursorline                 " Highlight cursor line
set noshowmode                 " Don't show the mode you're in
set hidden                     " Can navigate through buffers even if they're not saved
set autoread                   " Re-read files if unmodified
set linebreak                  " Avoid wrapping lines in the middle of a word.
set number                     " Line numbers
set expandtab shiftround smartindent autoindent

"
" Key mapping
"

" Remap leader key
let mapleader = "\<space>"

" Disable Ex Mode
nnoremap Q <Nop>

" Ctrl+c is ESC (it is by default but it won't trigger autocommands)
inoremap <c-c> <esc>

" Ctrl+s saves file in normal/insert mode
nnoremap <c-s> <esc>:wa<CR>
inoremap <c-s> <esc>:wa<CR>

" Ctrl+hjkl moves split focus
nnoremap <c-h> <c-w>h
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-l> <c-w>l

" Navigate through buffers
nnoremap gn :bn<cr>
nnoremap gb :bp<cr>

" Ctrl+t new tab
nnoremap <c-t> :tabe<cr>

" Ctrl+q close buffer
nnoremap <c-q> :bd<cr>

" Format file indentation
nnoremap <leader><Tab> <esc>gg=G``zz

" Open terminal
nnoremap <leader>t :terminal<cr>

" Open .vimrc
nnoremap <leader>v :e ~/.vimrc<cr>

" 0 goes to first indentation
nnoremap 0 ^

" Use leader+1 to open todo.txt on new tab
nnoremap <leader>1 :tabe ~/todo.txt<cr>

" Use ctrl+F to trigger file completion
inoremap <c-f> <c-x><c-f>

" Disable arrow keys
nnoremap <Up> <Nop>
nnoremap <Down> <Nop>
nnoremap <Left> <Nop>
nnoremap <Right> <Nop>

" Easier block indentation
nnoremap <tab> >>
nnoremap <s-tab> <<
vnoremap <tab> >gv
vnoremap <s-tab> <gv
nnoremap < <Nop>
vnoremap < <Nop>
nnoremap > <Nop>
vnoremap > <Nop>

" Search and replace in file (selection or word)
vnoremap <c-n> "9y:%s/<c-r>9//g<left><left>
nnoremap <c-n> viw"9y:%s/<c-r>9//g<left><left>

" Map ESC key to exit insert mode in :terminal (vim8 or neovim)
if has('terminal') || has('nvim')
  tnoremap <Esc> <C-\><C-n>
endif

" Identify the syntax group of the word at the cursor
map <leader>H :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
      \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
      \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

"
" Autocommands
"

" I don't wanna save changes to a directory ¬¬
autocmd FileType netrw setl bufhidden=delete

" Use emmet on TAB
autocmd FileType markdown,css,javascript,typescript,javascript.jsx,typescript.jsx,html imap <tab> <plug>(emmet-expand-abbr)

"
" PLUGINS. VimPlug will download and install all of them
"

" Start plugins
call plug#begin('~/.vim/plugged')

"
" UI
"
Plug 'ap/vim-buftabline'

"
" PROJECT
"
Plug 'tpope/vim-fugitive'
Plug 'editorconfig/editorconfig-vim'
Plug 'pablopunk/native-sidebar.vim'

"
" KEYBINDINGS
"
Plug 'christoomey/vim-tmux-navigator'
Plug 'christoomey/vim-system-copy'

"
" EDIT
"
Plug 'pablopunk/persistent-undo.vim'
Plug 'pablopunk/hot-reload.vim', { 'for': 'vim' }
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'

"
" SEARCH
"
Plug 'pablopunk/better-find.vim'
Plug 'mileszs/ack.vim'
let g:ackprg = 'ag --nogroup --column'
cnoreabbrev Ack Ack!
nnoremap <leader>f :Ack! <cword><cr>

Plug 'brooth/far.vim'
Plug 'ctrlpvim/ctrlp.vim'
let g:ctrlp_user_command = '/usr/bin/env fd --type file --color never "" %s -E po/'
nnoremap <leader><leader> :CtrlPBuffer<cr>
nnoremap <c-s-p> :CtrlPCurWD<cr>

Plug 'MattesGroeger/vim-bookmarks'
nnoremap <leader>n :BookmarkNext<cr>
nnoremap <leader>N :BookmarkPrev<cr>
nnoremap <leader>B :BookmarkShowAll<cr>
nnoremap <leader>b :BookmarkToggle<cr>

Plug 'tyru/open-browser.vim'        " this one is required
Plug 'tyru/open-browser-github.vim' "   by this one

"
" HTML TOOLS
"
Plug 'mattn/emmet-vim', { 'for': [ 'javascript', 'javascript.jsx', 'typescript.jsx', 'typescript', 'html', 'markdown' ] }
Plug 'AndrewRadev/tagalong.vim', { 'for': [ 'javascript.jsx', 'typescript.jsx', 'html', 'markdown' ] }
let g:tagalong_filetypes = ['html', 'js', 'jsx', 'ts', 'tsx', 'md']

"
" SYNTAX TOOLS
"
Plug 'prettier/vim-prettier', { 'for': [ 'javascript', 'typescript', 'json', 'javascript.jsx', 'typescript.jsx' ] }
Plug 'sheerun/vim-polyglot'
Plug 'pangloss/vim-javascript', { 'for': [ 'javascript', 'typescript', 'json', 'javascript.jsx', 'typescript.jsx' ] }
let g:jsx_ext_required = 0

"
" COC
"
Plug 'neoclide/coc.nvim', {'do': { -> coc#util#install()}}
let g:coc_global_extensions = [
        \ 'coc-tsserver',
        \ 'coc-tslint',
        \ 'coc-eslint',
        \ 'coc-html',
        \ 'coc-json',
        \ 'coc-git',
        \ 'coc-pairs',
        \ 'coc-github',
        \ 'coc-python',
        \ 'coc-tabnine',
        \ 'coc-highlight',
        \ 'coc-marketplace',
        \]
set shortmess+=c
set updatetime=300
" Go to def
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
" Navigate through git changes on file
nmap <leader>g <Plug>(coc-git-nextchunk)
nmap <leader>G <Plug>(coc-git-prevchunk)
" Use K for documentation including Coc
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction
" Coc commands and stuff
nnoremap <leader>c :CocCommand<cr>
nnoremap <leader>e :CocList extensions<cr>
nnoremap <silent> <leader>o :<C-u>CocList outline<cr>
nnoremap <silent> <leader>O :<C-u>CocList -I symbols<cr>
nmap <silent> <leader>a <Plug>(coc-diagnostic-next)
nmap <silent> <leader>A <Plug>(coc-diagnostic-prev)
nmap <leader>r <Plug>(coc-rename)
autocmd CursorHold * silent call CocActionAsync('highlight')


"
" COLORS
"
Plug 'pablopunk/sick.vim'
Plug 'edkolev/tmuxline.vim' " Make tmux match statusline on vim

"
" End of plugins
"
call plug#end()

" Custom commands
command! ImportES6 :execute "normal! 0ciwimport\<esc>f=hdt'i from \<esc>f)xj0"
command! MetaResponsiveTag :execute "normal! i<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\<esc>"

" Color config
if has('nvim')
  set termguicolors
endif
colorscheme sick
let g:bookmark_sign = '♥'
hi BookmarkSign guifg=#ff4920 guibg=NONE
