#!/bin/zsh

function powersave {
  # linux
  sudo cpufreq-set -g powersave && \
    sudo pm-powersave true
}

function power {
  sudo cpufreq-set -g performance && \
    sudo pm-powersave false
}

function gclone {
  git clone git@github.com:pablopunk/$1 && cd $1
}

function grebase {
  branch="$(git symbolic-ref --short HEAD)"
  git fetch upstream && \
    git rebase upstream/$branch
}

function greset_hard {
  branch="$(git symbolic-ref --short HEAD)"
  git fetch upstream && \
    git reset --hard upstream/$branch
}

function gpr_checkout {
  if [ -z "$1" ]
    then
      echo "Missing github PR link"
      return
  fi

  if [ ! -z "$(git status --porcelain)" ]
    then
      echo "Git status is not clean"
      return
  fi

  html="$(curl -s $1)"
  matches="$(echo $html | grep -o 'title="[^\/]*\/[^:]*:[^"]*' | awk '!x[$0]++')"
  lines="$(echo $matches | awk 'END{print NR}')"

  if [[ ! "$lines" == 2 ]]
    then
      echo $matches
      echo
      echo "Oops, either the link was wrong or github has changed their html. Check it manually above:"
      return
  fi

  first_line="$(echo $matches | sed 's/^\s*$//' | sed -n '1 p' | sed 's/title="//')"
  upstream_user="$(echo $first_line | cut -d'/' -f1)"
  upstream_repo="$(echo $first_line | egrep -o '/.*:' | tr -d '/:')"
  upstream_branch="$(echo $first_line | cut -d':' -f2)"

  second_line="$(echo $matches | sed 's/^\s*$//' | sed -n '2 p' | sed 's/title="//')"
  pr_user="$(echo $second_line | cut -d'/' -f1)"
  pr_repo="$(echo $second_line | egrep -o '/.*:' | tr -d '/:')"
  pr_branch="$(echo $second_line | cut -d':' -f2)"

  git fetch upstream
  git checkout $upstream_branch || return
  git reset --hard upstream/$upstream_branch

  git remote add $pr_user https://github.com/$pr_user/$pr_repo
  git fetch $pr_user
  git checkout $pr_user-$pr_branch || git checkout -b $pr_user-$pr_branch
  git branch --set-upstream-to=$pr_user/$pr_branch
  git reset --hard $pr_user/$pr_branch
}

function copy {
  [ "$(uname)" == "Linux" ] && xsel --clipboard --input
  [ "$(uname)" == "Darwin" ] && pbcopy
}

function weather {
  curl -s "wttr.in/${1-pontevedra}?format=1"
}

function nvm {
  echo "nvm is deprecated, use asdf instead"
}

function localLambdaOn {
  sed -i '' "s/AWS.Lambda()/AWS.Lambda({endpoint:'http:\/\/localhost:3002'})/g" $HOME/src/maze/maze-monorepo/packages/maze-api-core/src/utils/aws/Lambda.ts
}

function localLambdaOff {
  sed -i '' "s/AWS.Lambda(.*)/AWS.Lambda()/g" $HOME/src/maze/maze-monorepo/packages/maze-api-core/src/utils/aws/Lambda.ts
}

function loggerDev {
  echo
  echo "[error]"
  echo "now the logger package is here:"
  echo "https://github.com/mazedesignhq/shared-packages/tree/main"
  echo
  echo "[fix]"
  echo "Clone that repo and update this script accordinly"
  echo
  return
  comeback_to="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

  # turn on dev mode for MazeLogger
  cd ~/src/maze/maze-monorepo/packages/logger
  sed -i '' "s/this\.envName\ ===\ 'development';/true;/g" ./src/MazeLogger.ts
  pnpm build && git checkout ./src/MazeLogger.ts

  cd $comeback_to

  # turn off events logging
  cd ~/src/maze/maze-monorepo/packages/sentry-lambda
  sed -i '' "s/logger\.log/\/\/logger.log/g" ./src/index.ts
  pnpm build && git checkout ./src/index.ts

  cd $comeback_to
}

function setup_AWS_cli {
  curl "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o "AWSCLIV2.pkg"
  sudo installer -pkg AWSCLIV2.pkg -target / && rm AWSCLIV2.pkg
  brew install --cask aws-vault

  echo "go to https://console.aws.amazon.com/iam/home?region=us-east-1#/security_credentials"
  echo "and get your AWS credentials there (or create new ones)"

  aws configure
  aws-vault add default

  echo "[profile default]
region=us-east-1
mfa_serial=arn:aws:iam::184487594157:mfa/pablo_varela

[profile mazedesign_developer]
region=us-east-1
role_arn=arn:aws:iam::184487594157:role/developer
source_profile=default
mfa_serial=arn:aws:iam::184487594157:mfa/pablo_varela

[profile production_developer]
region=us-east-1
role_arn=arn:aws:iam::249751880523:role/developer
source_profile=default
mfa_serial=arn:aws:iam::184487594157:mfa/pablo_varela

[profile staging_developer]
region=us-east-1
role_arn=arn:aws:iam::027609491582:role/developer
source_profile=default
mfa_serial=arn:aws:iam::184487594157:mfa/pablo_varela

[profile testing_developer]
region=us-east-1
role_arn=arn:aws:iam::211773933080:role/developer
source_profile=default
mfa_serial=arn:aws:iam::184487594157:mfa/pablo_varela
" > ~/.aws/config

  echo
  echo "now test your config with 'aws-vault exec testing_developer'"
}

function add_spacer_to_dock {
  defaults write com.apple.dock persistent-apps -array-add '{"tile-type"="small-spacer-tile";}'
  killall Dock
}

function wait_for_docker {
  until docker info &> /dev/null; do
    open /Applications/OrbStack.app
    sleep 1
  done
}

function benchmark_neovim_plugins {
  python3 <(curl -sSL https://raw.githubusercontent.com/hyiltiz/vim-plugins-profile/master/vim-plugins-profile.py) nvim
}
