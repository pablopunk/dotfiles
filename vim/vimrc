"
" Some general settings
"

set nocompatible
filetype plugin indent on
syntax on

set ttyfast                    " Faster redrawing
set lazyredraw                 " Only when necessary
set encoding=utf-8             " Unicode
set incsearch                  " Incremental search
set hlsearch                   " Highlight search term
set ignorecase                 " Search is case insensitive
set smartcase                  " Unless your search has capital letters
set mouse=a                    " Allow mouse integration
set backspace=indent,eol,start " Fix delete key
set cursorline                 " Highlight cursor line
set noshowmode                 " Don't show the mode you're in
set hidden                     " Can navigate through buffers even if they're not saved
set autoread                   " Re-read files if unmodified
set linebreak                  " Avoid wrapping lines in the middle of a word.
set number                     " Line numbers
set scrolloff=3                " Spacing on top and bottom
set expandtab shiftround smartindent autoindent " Indent stuff

"
" Key mapping
"

" Remap leader key
let mapleader = "\<space>"

" Disable Ex Mode
nmap Q <Nop>

" Ctrl+c is ESC (it is by default but it won't trigger autocommands)
imap <c-c> <esc>

" Ctrl+s saves file in normal/insert mode
nmap <c-s> <esc>:w<CR>
imap <c-s> <esc>:w<CR>

" Ctrl+hjkl moves split focus
nmap <c-h> <c-w>h
nmap <c-j> <c-w>j
nmap <c-k> <c-w>k
nmap <c-l> <c-w>l

" Navigate through buffers
nmap gn :bn<cr>
nmap gb :bp<cr>

" Search with - and _ (emulate US keyboard)
nmap - /
nmap _ ;

" Use + to select all word matches
nmap + *N

" Ctrl+t new tab
nmap <c-t> :tabe<cr>

" Ctrl+q close buffer
nmap <c-q> :bd<cr>

" Format file
nmap <leader><Tab> <esc>:Prettier<cr>

" Open terminal
nmap <leader>t :terminal<cr>

" Open .vimrc
nmap <leader>v :e ~/.vimrc<cr>

" 0 goes to first indentation
nmap 0 ^

" Use leader+1 to open todo.txt on new tab
nmap <leader>1 :tabe ~/todo.txt<cr>

" Use ctrl+F to trigger file completion
imap <c-f> <c-x><c-f>

" Use system clipboard (reg *)
nmap <leader>cp "*y
vmap <leader>cp "*y
nmap <leader>p "*p
vmap <leader>p "*p

" Disable arrow keys
nmap <Up> <Nop>
nmap <Down> <Nop>
nmap <Left> <Nop>
nmap <Right> <Nop>

" Easier block indentation
nnoremap > >>
nnoremap < <<
vnoremap > >gv
vnoremap < <gv
" ctrl+i is mapped to Tab so is not the opposite of ctrl+o anymore

" Search and replace in file/line (selection or word)
vnoremap <c-n> "9y:%s/<c-r>9/<c-r>9/g<left><left>
nnoremap <c-n> viw"9y:%s/<c-r>9/<c-r>9/g<left><left>
vnoremap <leader>n "9y:s/<c-r>9/<c-r>9/g<left><left>
nnoremap <leader>n viw"9y:s/<c-r>9/<c-r>9/g<left><left>

" Map ESC key to exit insert mode in :terminal (vim8 or neovim)
if has('terminal') || has('nvim')
  tmap <Esc> <C-\><C-n>
endif

" Identify the syntax group of the word at the cursor
nmap <leader>H :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
      \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
      \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>
" Remove highlights
nmap <leader>h :noh<cr>

"
" Autocommands
"

" I don't wanna save changes to a directory ¬¬
autocmd FileType netrw setl bufhidden=delete

augroup templates
  autocmd!
  autocmd BufNewFile *.tsx,*.jsx
    \ 0r $HOME/.config/nvim/templates/react.tsx |
    \ exe "normal /template\<cr>diw"
  autocmd BufNewFile *.json
    \ 0r $HOME/.config/nvim/templates/empty.json |
    \ exe "normal ggo"
augroup end


"
" Abbreviations
"
iabbr widht width
iabbr heigth height
iabbr ireact import React from 'react'
iabbr fcreact const Component = () =>
iabbr ccreact class Component extends React.Component

"
" PLUGINS. VimPlug will download and install all of them
"

" Start plugins
call plug#begin('~/.vim/plugged')

"
" PROJECT
"
" Plug 'psliwka/vim-smoothie'
Plug 'tpope/vim-fugitive'
command! Conflicts Gvdiffsplit!
nnoremap <leader>dh :diffget //2<cr>
nnoremap <leader>dl :diffget //3<cr>
Plug 'editorconfig/editorconfig-vim'
Plug 'scrooloose/nerdtree'
" Remove bookmarks shortcuts while using nerdtree
let g:bookmark_no_default_key_mappings = 1
function! BookmarkMapKeys()
    nmap mm :BookmarkToggle<CR>
    nmap mi :BookmarkAnnotate<CR>
    nmap mn :BookmarkNext<CR>
    nmap mp :BookmarkPrev<CR>
    nmap ma :BookmarkShowAll<CR>
    nmap mc :BookmarkClear<CR>
    nmap mx :BookmarkClearAll<CR>
    nmap mkk :BookmarkMoveUp
    nmap mjj :BookmarkMoveDown
endfunction
function! BookmarkUnmapKeys()
    unmap mm
    unmap mi
    unmap mn
    unmap mp
    unmap ma
    unmap mc
    unmap mx
    unmap mkk
    unmap mjj
endfunction
autocmd BufEnter * :call BookmarkMapKeys()
autocmd BufEnter NERD_tree_* :call BookmarkUnmapKeys()
nnoremap <leader>b <esc>:NERDTreeFind<cr>
inoremap <c-b> <esc>:NERDTreeToggle<cr>
nnoremap <c-b> <esc>:NERDTreeToggle<cr>

Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
let g:NERDTreeIndicatorMapCustom = {
      \ "Modified"  : "✹",
      \ "Staged"    : "✚",
      \ "Untracked" : "✭",
      \ "Renamed"   : "➜",
      \ "Unmerged"  : "═",
      \ "Deleted"   : "✖",
      \ "Dirty"     : "✹",
      \ "Clean"     : "✔︎",
      \ "Igd"   : "☒",
      \ "Unknown"   : "?"
      \ }
" Hide ugly brackets symbols in nerdtree
augroup nerdtreeconcealbrackets
      autocmd!
      autocmd FileType nerdtree syntax match hideBracketsInNerdTree "\]" contained conceal containedin=ALL
      autocmd FileType nerdtree syntax match hideBracketsInNerdTree "\[" contained conceal containedin=ALL
      autocmd FileType nerdtree setlocal conceallevel=3
      autocmd FileType nerdtree setlocal concealcursor=nvic
augroup END
" Hide arrow symbol
let NERDTreeDirArrowExpandable = "\u00a0"
let NERDTreeDirArrowCollapsible = "\u00a0"

"
" KEYBINDINGS
"
Plug 'christoomey/vim-tmux-navigator'

"
" EDIT
"
Plug 'pablopunk/persistent-undo.vim'
Plug 'pablopunk/hot-reload.vim', { 'for': 'vim' }
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'

"
" SEARCH
"
Plug 'pablopunk/better-find.vim'
Plug 'mileszs/ack.vim'
let g:ackprg = 'ag --nogroup --column'
cabbrev Ack Ack!
nmap <leader>f :Ack -w <cword><cr>

Plug 'brooth/far.vim'
Plug 'markonm/traces.vim'
Plug 'ctrlpvim/ctrlp.vim'
let g:ctrlp_user_command = '/usr/bin/env fd --type file --color never "" %s -E po/'
nmap <leader><leader> :CtrlPBuffer<cr>

Plug 'MattesGroeger/vim-bookmarks'
let g:bookmark_sign = '♥'
Plug 'tyru/open-browser.vim'        " this one is required
Plug 'tyru/open-browser-github.vim' "   by this one

"
" SYNTAX
"
Plug 'pangloss/vim-javascript'
let g:jsx_ext_required = 0
Plug 'peitalin/vim-jsx-typescript'
Plug 'jparise/vim-graphql'
Plug 'keith/swift.vim'
Plug 'evanleck/vim-svelte'
Plug 'styled-components/vim-styled-components', {'branch': 'main'}

"
" COC
"
Plug 'neoclide/coc.nvim', {'branch': 'release'}
let g:coc_global_extensions = [
      \ 'coc-emmet',
      \ 'coc-eslint',
      \ 'coc-git',
      \ 'coc-github',
      \ 'coc-highlight',
      \ 'coc-html',
      \ 'coc-json',
      \ 'coc-marketplace',
      \ 'coc-pairs',
      \ 'coc-prettier',
      \ 'coc-snippets',
      \ 'coc-svelte',
      \ 'coc-tabnine',
      \ 'coc-tslint',
      \ 'coc-tsserver',
      \]
set shortmess+=c
set updatetime=300
set signcolumn=yes
" Faster python detection
let g:python_host_prog = '/usr/local/bin/python'
let g:python3_host_prog = '/usr/local/bin/python3'
" Go to def
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
" Navigate through git changes on file
nmap <leader>g <Plug>(coc-git-nextchunk)
nmap <leader>G <Plug>(coc-git-prevchunk)
nmap <leader>u :CocCommand git.chunkUndo<cr>
" Use K for documentation including Coc
nmap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction
" Coc commands and stuff
nmap <leader>cc :CocCommand<cr>
vmap <leader>cc :CocCommand<cr>
nmap <leader>cl :CocList<cr>
nmap <leader>ca :CocAction<cr>
vmap <leader>ca :CocAction<cr>
nmap <silent> <leader>o :<C-u>CocList outline<cr>
nmap <silent> <leader>O :<C-u>CocList -I symbols<cr>
nmap <silent> ge <Plug>(coc-diagnostic-next-error)
nmap <silent> gE <Plug>(coc-diagnostic-prev-error)
nmap <leader>r <Plug>(coc-rename)
command! -nargs=? Fold :call CocAction('fold', <f-args>)
" Use tab for trigger completion with characters ahead and navigate.
" Use command '":verbose imap <tab> to make sure tab is not mapped by other
" plugin.
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1] =~# '\s'
endfunction
inoremap <silent><expr> <TAB> pumvisible() ? "\<c-n>" : <SID>check_back_space() ? "\<TAB>" : coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "<C-h>"
" Enable insert line for coc-pairs and also use enter to choose from code
" completion
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
command! -nargs=0 Prettier :CocCommand prettier.formatFile
" Highlight word
" autocmd CursorHold * silent call CocActionAsync('highlight')

"
" COLORS
"
Plug 'pablopunk/sick.vim'
Plug 'pablopunk/sunset.vim'
Plug 'morhetz/gruvbox'
Plug 'arzg/vim-colors-xcode'
Plug 'pablopunk/transparent.vim'
Plug 'joshdick/onedark.vim'
Plug 'bluz71/vim-nightfly-guicolors'
" Plug 'pablopunk/statusline.vim'
Plug 'edkolev/tmuxline.vim'

"
" End of plugins
"
call plug#end()

" Custom commands
command! ImportES6 :execute "normal! 0ciwimport\<esc>f=hdt'i from \<esc>f)xj0"
command! MetaResponsiveTag :execute "normal! i<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\<esc>"
command! HotReload autocmd BufWritePost *.vim source %
"
" Color config
if has('nvim')
  set termguicolors
endif
colorscheme sunset
