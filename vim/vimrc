" File settings
filetype plugin indent on

" Interface
syntax on
" set number                " Line numbers
" set relativenumber        " Relative line number
set ttyfast               " Faster redrawing
set lazyredraw            " Only when necessary
set noshowmode            " Already showing the mode in status bar

" Search settings
set incsearch  " Incremental search
set hlsearch   " Highlight search term
set ignorecase " Search is case insensitive
set smartcase  " Unless your search has capital letters
set path+=**   " Search files subdirectories

" Encoding
set list       " Show non-printable characters
set encoding=utf-8

" Allow tab to autocomplete searching files
set wildmenu
set wildignore+=**/node_modules/**
set wildignore+=**/cache/**
set wildignore+=**/logs/**
set wildignore+=**/log/**
set wildignore+=**/cov/**
set wildignore+=**/coverage/**
set wildignore+=**/vendor/**
set wildignore+=**/bower_components/**

" Invisible characters (tab, eol and trailing whitespace)
set list
set listchars=tab:▸\ ,eol:¬,trail:▫
highlight SpecialKey guifg=#333355 " Tab characters are gray
highlight NonText guifg=#333355    " Trailing spaces and LN are gray

" PLUGINS
call plug#begin('~/.vim/plugged')
" Git plugins
Plug 'airblade/vim-gitgutter'                   " Show changes on each line
Plug 'Xuyuanp/nerdtree-git-plugin'              " Git status on NERDTree
Plug 'tpope/vim-fugitive'                       " A lot of awesome things git related
" Editting tools
Plug 'terryma/vim-multiple-cursors'             " Find all and edit
Plug 'tpope/vim-commentary'                     " Toggle comments
Plug 'christoomey/vim-system-copy'              " Copy to system clipboard with 'cp'
Plug 'tpope/vim-surround'                       " Surround words with brackets/quoutes/etc
" Autocomplete (for all) and activate tern (for JS)
Plug 'maralla/completor.vim', {'do': 'cd pythonx/completers/javascript && npm install'}
Plug 'vim-scripts/ReplaceWithRegister'          " Replace with yanked text (gr)
" Search tools
Plug 'cloudhead/neovim-fuzzy'                   " Fuzzy finder
Plug 'mileszs/ack.vim'                          " Find in all files
Plug 'brooth/far.vim'                           " Find and replace in all files
" Navigation tools
Plug 'scrooloose/nerdtree'                      " File navigator
Plug 'christoomey/vim-tmux-navigator'           " Navigation between vim/tmux panes
Plug 'danro/rename.vim'                         " Rename the current file with :rename
" Html tools
Plug 'mattn/emmet-vim'                          " Very cool html snippets
Plug 'gregsexton/MatchTag'                      " Highlight matching html tag
" Syntax tools
Plug 'w0rp/ale'                                 " Async syntax checker
Plug 'editorconfig/editorconfig-vim'            " Use lint config in .editorconfig
Plug 'prettier/vim-prettier'                    " Lint js with prettier
Plug 'leafgarland/typescript-vim'               " Typescript syntax
Plug 'mxw/vim-jsx'                              " Jsx syntax
Plug 'pangloss/vim-javascript'                  " Improved JS syntax
" Project tools
Plug 'wakatime/vim-wakatime'                    " Time tracker
" Colors
Plug 'pablopunk/colors.vim'                     " My colorschemes
Plug 'chrisbra/Colorizer'                       " Html colors (#123456)
call plug#end()

" Colors
if exists('$TMUX')
  " Colors in tmux
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif
set termguicolors
set background=dark
colorscheme tiza

" Ale settings
let g:ale_fix_on_save = 1 " FIX files on save
let g:ale_completion_enabled = 1 " Try to complete stuff
let sd = matchstr(getcwd(), 'superdesk')
if empty(sd) " if it's not superdesk, use standard
  let g:ale_linters = { 'javascript': ['standard'] } | :let g:ale_fixers = { 'javascript': ['standard'] }
else " if it's superdesk, use eslint
  let g:ale_linters = { 'javascript': ['eslint'] } | :let g:ale_fixers = { 'javascript': ['eslint'] }
endif

" Prettier settings
let g:prettier#config#bracket_spacing = 'true'
let g:prettier#config#tab_width = 2
let g:prettier#config#trailing_comma = 'none'
let g:prettier#config#semi = 'false'

" use ag instead of ack with ack.vim
let g:ackprg = 'ag --nogroup --nocolor --column'

" NERDTree Git symbols
let g:NERDTreeIndicatorMapCustom = {
      \ "Modified"  : "~",
      \ "Staged"    : "+",
      \ "Untracked" : "?",
      \ "Renamed"   : "r",
      \ "Unmerged"  : "=",
      \ "Deleted"   : "✗",
      \ "Dirty"     : "*",
      \ "Clean"     : "✓",
      \ "Ignored"   : "·",
      \ "Unknown"   : "??"
      \ }

" JSX syntax in JS files
let g:jsx_ext_required = 0

" Lightline config
set laststatus=2
let g:lightline = {
      \ 'colorscheme': 'Dracula',
      \ }

" prevent not-working delete key
set backspace=indent,eol,start

" Keep undo history across sessions by storing it in a file
if has('persistent_undo')
  let undo_dir = expand('$HOME/.vim/undo_dir')
  if !isdirectory(undo_dir)
    call mkdir(undo_dir, "", 0700)
  endif
  set undodir=$HOME/.vim/undo_dir
  set undofile
endif

" COMMANDS
command! MakeTags !ctags -R . --exclude=.git --exclude=logs --exclude=node_modules --exclude=cov --exclude=app
"" Lint js with eslint
command! ES :let g:ale_linters = { 'javascript': ['eslint'] } | :let g:ale_fixers = { 'javascript': ['eslint'] }
"" Lint js with xo
command! XO :let g:ale_linters = { 'javascript': ['xo'] } | :let g:ale_fixers = { 'javascript': [] }
"" Lint js with standard
command! ST :let g:ale_linters = { 'javascript': ['standard'] } | :let g:ale_fixers = { 'javascript': ['standard'] }
"" Disable js linters
command! NO :let g:ale_linters = { 'javascript': [] } | :let g:ale_fixers = { 'javascript': [] }

" Remap keys
"" Ctrl+s saves file in normal mode
nnoremap <c-s> <esc>:w<CR>
"" Ctrl+b opens NERDTree
nnoremap <c-b> :NERDTreeToggle<CR>
"" Ctrl+i formats file indentation
nnoremap <c-i> <esc>gg=G``zz
"" Move current buffer to a new tab
nnoremap <c-q> :tabedit %<CR>
"" Open fuzzy finder
nnoremap <C-p> :FuzzyOpen<CR>
"" Go to tag
nnoremap ] <c-]>
"" Use Tab for emmet
imap <expr> <tab> emmet#expandAbbrIntelligent("\<tab>")
"" Disable arrow keys
nnoremap <Up> <Nop>
nnoremap <Down> <Nop>
nnoremap <Left> <Nop>
nnoremap <Right> <Nop>
"" Identify the syntax group of the word at the cursor
map <F4> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" AUTOCOMMANDS
"" Resizing window resets splits
autocmd VimResized * execute "normal! \<c-w>="

" Indentation
set expandtab shiftround smartindent autoindent

" Hyper.app first line bug
set t_RV=
